=============================================
Documentation of the trainwarner_test project
=============================================

Bloks
=====

anyblok-core
------------

This Blok is required in all AnyBlok applications.

    This Blok provides the main fonctionalities for Bloks management (install,
    update, uninstall…).

    It also brings the representation of Anyblok objects (Models, Fields, etc.)
    within the database itself, and some fundamental facilities.

    * Core Models

      These are pure code Models, used as base classes:

      - Base: inherited by all Models
      - SqlBase: inherited by all models backed by an SQL table
      - SqlViewBase: inherited by all models bacled by an SQL view

    * System Models

      These correspond to actual tables in the table. They provide reflection
      or fundamental facilities.

      - Blok: represent all *available* Bloks, with their state and more
      - Model
      - Field
      - Column
      - Relationship
      - :class:`Sequence <.system.sequence.Sequence>`: database sequences,
        for use in applications.
      - :class:`Parameter <.system.parameter.Parameter>`: application
        parameters
    

Parameter:

* **author** = Suzanne Jean-Sébastien
* **version** = 0.22.5
* **installed_version** = 0.22.5



anyblok-mixins
--------------



Parameter:

* **author** = Suzanne Jean-Sébastien
* **version** = 1.0.0
* **installed_version** = 1.0.0



anyblok-workflow
----------------



Parameter:

* **author** = Suzanne Jean-Sébastien
* **version** = 1.0.0
* **installed_version** = 1.0.0



auth
----



Parameter:

* **author** = Jean-Sébastien Suzanne
* **version** = 0.1.0
* **installed_version** = 0.1.0



auth-password
-------------



Parameter:

* **author** = Jean-Sébastien Suzanne
* **version** = 0.1.0
* **installed_version** = 0.1.0



authorization
-------------



Parameter:

* **author** = Jean-Sébastien Suzanne
* **version** = 0.1.0
* **installed_version** = 0.1.0



trainwarner
-----------

Trainwarner's Blok class definition
    

Parameter:

* **author** = Alexis Tourneux
* **version** = 0.1.0
* **installed_version** = 0.1.0



Models
======

This the differents models defined on the project

Model.System
------------

Properties:

* **table name** : No table

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

Model.System.Model
------------------

Models assembled

Properties:

* **table name** : system_model

Fields
~~~~~~

* name

 **code** (system_model.name),  **model** (Model.System.Model),  **label** (Name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* table

 **code** (system_model.table),  **model** (Model.System.Model),  **label** (Table),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* is_sql_model

 **code** (system_model.is_sql_model),  **model** (Model.System.Model),  **label** (Is a SQL model),  **ftype** (Boolean),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* description

 **code** (system_model.description),  **model** (Model.System.Model),  **label** (Description),  **ftype** (Function),  **entity_type** (Model.System.Field)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _format_field

* add_fields

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* define_mapper_args

* define_table_args

* define_table_kwargs

* description

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* getFieldType

* get_all_registry_names

* get_field

* get_field_model

* get_hybrid_property_columns

* get_model_doc_string

 Return the docstring of the model
        

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* is_sql_model

* listener_update_model

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* name

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* table

* update_fields

* update_list

 Insert and update the table of models

        :exception: Exception
        

Model.System.Field
------------------

Properties:

* **table name** : system_field

Fields
~~~~~~

* name

 **code** (system_field.name),  **model** (Model.System.Field),  **label** (Name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* code

 **code** (system_field.code),  **model** (Model.System.Field),  **label** (Code),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* model

 **code** (system_field.model),  **model** (Model.System.Field),  **label** (Model),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* label

 **code** (system_field.label),  **model** (Model.System.Field),  **label** (Label),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* ftype

 **code** (system_field.ftype),  **model** (Model.System.Field),  **label** (Type),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* entity_type

 **code** (system_field.entity_type),  **model** (Model.System.Field),  **label** (Entity type),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _description

* _format_field

* add_field

 Insert a field definition

        :param rname: name of the field
        :param label: label of the field
        :param model: namespace of the model
        :param table: name of the table of the model
        :param ftype: type of the AnyBlok Field
        

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* alter_field

 Update an existing field

        :param field: instance of the Field model to update
        :param label: label of the field
        :param ftype: type of the AnyBlok Field
        

* code

* define_mapper_args

* define_table_args

* define_table_kwargs

* entity_type

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* ftype

* getFieldType

* get_all_registry_names

* get_cname

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* label

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* model

* name

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

Model.System.Column
-------------------

Properties:

* **table name** : system_column

Fields
~~~~~~

* name

 **code** (system_column.name),  **model** (Model.System.Column),  **label** (Name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* model

 **code** (system_column.model),  **model** (Model.System.Column),  **label** (Model),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* autoincrement

 **code** (system_column.autoincrement),  **model** (Model.System.Column),  **label** (Auto increment),  **ftype** (Boolean),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* foreign_key

 **code** (system_column.foreign_key),  **model** (Model.System.Column),  **label** (Foreign key),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* primary_key

 **code** (system_column.primary_key),  **model** (Model.System.Column),  **label** (Primary key),  **ftype** (Boolean),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* unique

 **code** (system_column.unique),  **model** (Model.System.Column),  **label** (Unique),  **ftype** (Boolean),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* nullable

 **code** (system_column.nullable),  **model** (Model.System.Column),  **label** (Nullable),  **ftype** (Boolean),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* remote_model

 **code** (system_column.remote_model),  **model** (Model.System.Column),  **label** (Remote model),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _description

* _format_field

* add_field

 Insert a column definition

        :param cname: name of the column
        :param column: instance of the column
        :param model: namespace of the model
        :param table: name of the table of the model
        :param ftype: type of the AnyBlok Field
        

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* alter_field

 Update an existing column

        :param column: instance of the Column model to update
        :param meta_column: instance of the SqlAlchemy column
        :param ftype: type of the AnyBlok Field
        

* autoincrement

* code

* define_mapper_args

* define_table_args

* define_table_kwargs

* entity_type

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* foreign_key

* ftype

* getFieldType

* get_all_registry_names

* get_cname

 Return the real name of the column

        :param field: the instance of the column
        :param cname: Not use here
        :rtype: string of the real column name
        

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* label

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* model

* name

* nullable

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* primary_key

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* remote_model

* unique

* use

Model.System.RelationShip
-------------------------

Properties:

* **table name** : system_relationship

Fields
~~~~~~

* name

 **code** (system_relationship.name),  **model** (Model.System.RelationShip),  **label** (Name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* model

 **code** (system_relationship.model),  **model** (Model.System.RelationShip),  **label** (Model),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* local_column

 **code** (system_relationship.local_column),  **model** (Model.System.RelationShip),  **label** (Local column),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* remote_column

 **code** (system_relationship.remote_column),  **model** (Model.System.RelationShip),  **label** (Remote column),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* remote_name

 **code** (system_relationship.remote_name),  **model** (Model.System.RelationShip),  **label** (Remote name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* remote_model

 **code** (system_relationship.remote_model),  **model** (Model.System.RelationShip),  **label** (Remote model),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* remote

 **code** (system_relationship.remote),  **model** (Model.System.RelationShip),  **label** (Remote),  **ftype** (Boolean),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* nullable

 **code** (system_relationship.nullable),  **model** (Model.System.RelationShip),  **label** (Nullable),  **ftype** (Boolean),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _description

* _format_field

* add_field

 Insert a relationship definition

        :param rname: name of the relationship
        :param relation: instance of the relationship
        :param model: namespace of the model
        :param table: name of the table of the model
        :param ftype: type of the AnyBlok Field
        

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* alter_field

* code

* define_mapper_args

* define_table_args

* define_table_kwargs

* entity_type

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* ftype

* getFieldType

* get_all_registry_names

* get_cname

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* label

* local_column

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* model

* name

* nullable

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* remote

* remote_column

* remote_model

* remote_name

* use

Model.System.Blok
-----------------

Properties:

* **table name** : system_blok

Fields
~~~~~~

* name

 **code** (system_blok.name),  **model** (Model.System.Blok),  **label** (Name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* state

 **code** (system_blok.state),  **model** (Model.System.Blok),  **label** (State),  **ftype** (Selection),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* author

 **code** (system_blok.author),  **model** (Model.System.Blok),  **label** (Author),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* order

 **code** (system_blok.order),  **model** (Model.System.Blok),  **label** (Order),  **ftype** (Integer),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* short_description

 **code** (system_blok.short_description),  **model** (Model.System.Blok),  **label** (Short description),  **ftype** (Function),  **entity_type** (Model.System.Field)

* long_description

 **code** (system_blok.long_description),  **model** (Model.System.Blok),  **label** (Long description),  **ftype** (Function),  **entity_type** (Model.System.Field)

* logo

 **code** (system_blok.logo),  **model** (Model.System.Blok),  **label** (Logo),  **ftype** (Function),  **entity_type** (Model.System.Field)

* version

 **code** (system_blok.version),  **model** (Model.System.Blok),  **label** (Version),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* installed_version

 **code** (system_blok.installed_version),  **model** (Model.System.Blok),  **label** (Installed version),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* STATES

dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)

* _format_field

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* apply_state

 Call the rigth method is the blok state change

        .. warning::

            for the uninstallation the method called is ``uninstall_all``

        :param bloks: list of the blok name load by the registry
        

* author

* check_if_the_conditional_are_installed

 Return True if all the conditions to install the blok are satisfied

        :param blok: blok name
        :rtype: boolean
        

* define_mapper_args

* define_table_args

* define_table_kwargs

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* getFieldType

* get_all_registry_names

* get_hybrid_property_columns

* get_logo

fget of ``logo`` return the path in the blok of the logo

        :rtype: absolute path or None if unexiste logo
        

* get_long_description

 fget of the ``long_description`` Column.Selection

        :rtype: the readme file of the blok
        

* get_modified_fields

return the fields which have changed and their previous values

* get_short_description

 fget of the ``short_description`` Column.Selection

        :rtype: the docstring of the blok
        

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* install

 Method to install the blok
        

* installed_version

* is_installed

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* list_by_state

 Return the blok name in function of the wanted states

        :param states: list of the state
        :rtype: list if state is a state, dict if the states is a list
        

* listen_update_installed_blok

* load

 Method to load the blok when the registry is completly loaded
        

* load_all

 Load all the installed bloks
        

* logo

* long_description

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* name

* order

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* short_description

* state

* uninstall

 Method to uninstall the blok
        

* uninstall_all

 Search and call the uninstall method for all the uninstalled bloks

        .. warning::

            Use the ``desc order`` to uninstall because we can't uninstall
            a dependancies before

        :param bloksname: list of the blok name to uninstall
        

* update_list

 Populate the bloks list and update the state of existing bloks
        

* upgrade

 Method to update the blok
        

* version

Model.System.Cache
------------------

Properties:

* **table name** : system_cache

Fields
~~~~~~

* id

 **code** (system_cache.id),  **model** (Model.System.Cache),  **label** (Id),  **ftype** (Integer),  **entity_type** (Model.System.Column),  **autoincrement** (True),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* registry_name

 **code** (system_cache.registry_name),  **model** (Model.System.Cache),  **label** (Registry name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* method

 **code** (system_cache.method),  **model** (Model.System.Cache),  **label** (Method),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _format_field

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* clear_invalidate_cache

 Invalidate the cache that needs to be invalidated
        

* define_mapper_args

* define_table_args

* define_table_kwargs

* detect_invalidation

 Return True if a new invalidation is found in the table

        :rtype: Boolean
        

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* getFieldType

* get_all_registry_names

* get_hybrid_property_columns

* get_invalidation

 Return the pointer of the method to invalidate
        

* get_last_id

 Return the last primary key ``id`` value
        

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* id

* invalidate

 Call the invalidation for a specific method cached on a model

        :param registry_name: namespace of the model
        :param method: name of the method on the model
        :exception: CacheException
        

* invalidate_all

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* last_cache_id

int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4

* lrus

dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* method

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* registry_name

Model.System.Parameter
----------------------

Applications parameters.

    This Model is provided by ``anyblok-core`` to give applications a uniform
    way of specifying in-database configuration.

    It is a simple key/value representation, where values can be of any type
    that can be encoded as JSON.

    A simple access API is provided with the :meth:`get`, :meth:`set`,
    :meth:`is_exist` and further methods.
    

Properties:

* **table name** : system_parameter

Fields
~~~~~~

* key

 **code** (system_parameter.key),  **model** (Model.System.Parameter),  **label** (Key),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* value

 **code** (system_parameter.value),  **model** (Model.System.Parameter),  **label** (Value),  **ftype** (Json),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* multi

 **code** (system_parameter.multi),  **model** (Model.System.Parameter),  **label** (Multi),  **ftype** (Boolean),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _format_field

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* define_mapper_args

* define_table_args

* define_table_kwargs

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* get

 Return the value of the key

        :param key: key whose value to retrieve
        :return: associated value
        :rtype: anything JSON encodable
        :raises ParameterException: if the key doesn't exist.
        

* getFieldType

* get_all_registry_names

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_exist

 Check if one parameter exist for the key

        :param key: key to check
        :rtype: bool
        

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* key

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* multi

* pop

Remove the given key and return the associated value.

        :param str key: the key to remove
        :return: the value before removal
        :rtype: any JSON encodable type
        :raises ParameterException: if the key wasn't present
        

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* set

 Insert or update parameter value for a key.

        .. note:: if the key already exists, the value will be updated

        :param str key: key to save
        :param value: value to save
        

* value

Model.System.Sequence
---------------------

Database sequences.

    This Model allows applications to define and use Database sequences easily.

    It is a rewrapping of `SQLAlchemy sequences
    <http://docs.sqlalchemy.org/en/latest/core/defaults.html
    #sqlalchemy.schema.Sequence>`_, with additional formatting
    capabilities to use them, e.g, in fields of applicative Models.

    Sample usage::

        sequence = registry.System.Sequence.insert(
        code="string code",
        formater="One prefix {seq} One suffix")

    .. seealso:: The :attr:`formater` field.

    To get the next formatted value of the sequence::

        sequence.nextval()

    Full example in a Python shell::

        >>> seq = Sequence.insert(code='SO', formater="{code}-{seq:06d}")
        >>> seq.nextval()
        'SO-000001'
        >>> seq.nextval()
        'SO-000002'
    

Properties:

* **table name** : system_sequence

Fields
~~~~~~

* id

 **code** (system_sequence.id),  **model** (Model.System.Sequence),  **label** (Id),  **ftype** (Integer),  **entity_type** (Model.System.Column),  **autoincrement** (True),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* code

 **code** (system_sequence.code),  **model** (Model.System.Sequence),  **label** (Code),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* number

 **code** (system_sequence.number),  **model** (Model.System.Sequence),  **label** (Number),  **ftype** (Integer),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* seq_name

 **code** (system_sequence.seq_name),  **model** (Model.System.Sequence),  **label** (Seq name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* formater

 **code** (system_sequence.formater),  **model** (Model.System.Sequence),  **label** (Formater),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _cls_seq_name

str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.

* _format_field

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* code

* create_sequence

Create the database sequence for an instance of Sequence Model.

        :return: suitable field values for insertion of the Model instance
        :rtype: dict
        

* define_mapper_args

* define_table_args

* define_table_kwargs

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* formater

* getFieldType

* get_all_registry_names

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* id

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* nextval

Format and return the next value of the sequence.

        :rtype: str
        

* nextvalBy

Return next value of the first Sequence matching given criteria.

        :param crit: criteria to match, e.g., ``code=SO``
        :return: :meth:`next_val` result for the first matching Sequence,
                 or ``None`` if there's no match.
        

* number

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* seq_name

Model.Authorization
-------------------

Namespace for models supporting authorization policies.

Properties:

* **table name** : No table

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

Model.Documentation
-------------------

Properties:

* **table name** : No table

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _auto_doc

* _toRST

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* auto_doc

* auto_doc_blok

* auto_doc_model

* chapter2RST

* footer2RST

* header2RST

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* toRST

* toRST_blok

* toRST_model

* toSQL

* toUML

Model.Documentation.Blok
------------------------

Properties:

* **table name** : No table

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* exist

* filterBloks

* footer2RST

* getelements

* header2RST

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* toRST

* toRST_get_field

* toRST_write_params

Model.Documentation.Model
-------------------------

Properties:

* **table name** : No table

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _auto_doc

* _toRST

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* exist

* filterModel

* footer2RST

* get_all_models

* getelements

* header2RST

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* toRST

* toRST_docstring

* toRST_field

* toRST_method

* toRST_properties

* toRST_properties_get

* toSQL_add_fields

* toSQL_add_table

* toUML_add_attributes

* toUML_add_model

Model.Documentation.Model.Field
-------------------------------

Properties:

* **table name** : No table

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* exist

* filterField

* footer2RST

* getelements

* header2RST

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* mappers

dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* toRST

* toRST_docstring

* toRST_properties

* toRST_properties_get

* toSQL

* toSQL_column

* toSQL_field

* toSQL_relationship

* toUML

* toUML_column

* toUML_field

* toUML_relationship

Model.Documentation.Model.Attribute
-----------------------------------

Properties:

* **table name** : No table

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* exist

* filterAttribute

* footer2RST

* getelements

* header2RST

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* toRST

* toRST_docstring

* toUML

Model.User
----------

This model ovverrides Model.User from anyblok_pyramid. It is intented
       for representing a trainwarner user.

       Inherited fields are the following :

           * login : String representing login used for authenticating users.
           For this field, the email address will be used.
           * First Name : string that contains user first name
           * Last Name : string that contains user last name
           * Name : function that returns user full name

       Implemented fields are the following :

           * Email address : string that contains user email address

    

Properties:

* **table name** : user

Fields
~~~~~~

* login

 **code** (user.login),  **model** (Model.User),  **label** (Login),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* first_name

 **code** (user.first_name),  **model** (Model.User),  **label** (First name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* last_name

 **code** (user.last_name),  **model** (Model.User),  **label** (Last name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* name

 **code** (user.name),  **model** (Model.User),  **label** (Name),  **ftype** (Function),  **entity_type** (Model.System.Field)

* email

 **code** (user.email),  **model** (Model.User),  **label** (Email Address),  **ftype** (Email),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (True),  **nullable** (False),  **remote_model** (None)

* create_date

 **code** (user.create_date),  **model** (Model.User),  **label** (Create date),  **ftype** (DateTime),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* edit_date

 **code** (user.edit_date),  **model** (Model.User),  **label** (Edit date),  **ftype** (DateTime),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _format_field

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* check_login

Overwrite the method to check if the user exist and
        the password gave is the same sa the password stored

        :param login: str
        :param password: str
        :exception: HTTPUnauthorized
        

* create_date

* define_mapper_args

* define_table_args

* define_table_kwargs

* edit_date

* email

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* first_name

* format_login_params

Return the login and password from query

        By default the query come from json_body and are named
        **login** and **password**

        If the entries come from another place, this method must be overwrite
        :param request: the request from the controllers
        

* getFieldType

* get_acl

Overwrite the method to return the ACL for the resource and user

        :param login: str, login of the user
        :param resource: str, name of the resource
        

* get_all_registry_names

* get_hybrid_property_columns

* get_login_location_to

Return the default path after the login

* get_logout_location_to

Return the default path after the logout

* get_modified_fields

return the fields which have changed and their previous values

* get_name

Return the name of the user

* get_roles

Return the roles of an user

        :param login: str, login attribute of the user
        :rtype: list of str (name of the roles)
        

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* last_name

* login

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* name

* passengers

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* roles

* wishes

Model.User.Role
---------------

Role, allow to group some authorization for an user

Properties:

* **table name** : user_role

Fields
~~~~~~

* name

 **code** (user_role.name),  **model** (Model.User.Role),  **label** (Name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* label

 **code** (user_role.label),  **model** (Model.User.Role),  **label** (Label),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* roles_name

 **code** (user_role.roles_name),  **model** (Model.User.Role),  **label** (Roles name),  **ftype** (Function),  **entity_type** (Model.System.Field)

* children

 **code** (user_role.children),  **model** (Model.User.Role),  **label** (Children),  **ftype** (Many2Many),  **entity_type** (Model.System.RelationShip),  **local_column** (None),  **remote_column** (None),  **remote_name** (parents),  **remote_model** (Model.User.Role),  **remote** (False),  **nullable** (True)

* users

 **code** (user_role.users),  **model** (Model.User.Role),  **label** (Users),  **ftype** (Many2Many),  **entity_type** (Model.System.RelationShip),  **local_column** (None),  **remote_column** (None),  **remote_name** (roles),  **remote_model** (Model.User),  **remote** (False),  **nullable** (True)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _format_field

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* before_update_orm_event

Check if the role has not any cyclical dependencies
        

* children

* define_mapper_args

* define_table_args

* define_table_kwargs

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* getFieldType

* get_all_registry_names

* get_all_roles_name

Return all the name of the roles self and dependencies
        

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* label

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* name

* parents

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* roles_name

* users

Model.User.CredentialStore
--------------------------

Save in table login / password

Properties:

* **table name** : user_credentialstore

Fields
~~~~~~

* login

 **code** (user_credentialstore.login),  **model** (Model.User.CredentialStore),  **label** (Login),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (user.login),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (Model.User)

* password

 **code** (user_credentialstore.password),  **model** (Model.User.CredentialStore),  **label** (Password),  **ftype** (Password),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _format_field

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* define_mapper_args

* define_table_args

* define_table_kwargs

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* getFieldType

* get_all_registry_names

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* login

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* password

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

Model.User.Authorization
------------------------

Store the autorization rules

Properties:

* **table name** : user_authorization

Fields
~~~~~~

* id

 **code** (user_authorization.id),  **model** (Model.User.Authorization),  **label** (Id),  **ftype** (Integer),  **entity_type** (Model.System.Column),  **autoincrement** (True),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* order

 **code** (user_authorization.order),  **model** (Model.User.Authorization),  **label** (Order),  **ftype** (Integer),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* resource

 **code** (user_authorization.resource),  **model** (Model.User.Authorization),  **label** (Resource),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* model

 **code** (user_authorization.model),  **model** (Model.User.Authorization),  **label** (Model),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (system_model.name),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (Model.System.Model)

* primary_keys

 **code** (user_authorization.primary_keys),  **model** (Model.User.Authorization),  **label** (Primary keys),  **ftype** (Json),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* filter

 **code** (user_authorization.filter),  **model** (Model.User.Authorization),  **label** (Filter),  **ftype** (Json),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* login

 **code** (user_authorization.login),  **model** (Model.User.Authorization),  **label** (Login),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (user.login),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (Model.User)

* perms

 **code** (user_authorization.perms),  **model** (Model.User.Authorization),  **label** (Perms),  **ftype** (Json),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* perm_create

 **code** (user_authorization.perm_create),  **model** (Model.User.Authorization),  **label** (Perm create),  **ftype** (JsonRelated),  **entity_type** (Model.System.Field)

* perm_read

 **code** (user_authorization.perm_read),  **model** (Model.User.Authorization),  **label** (Perm read),  **ftype** (JsonRelated),  **entity_type** (Model.System.Field)

* perm_update

 **code** (user_authorization.perm_update),  **model** (Model.User.Authorization),  **label** (Perm update),  **ftype** (JsonRelated),  **entity_type** (Model.System.Field)

* perm_delete

 **code** (user_authorization.perm_delete),  **model** (Model.User.Authorization),  **label** (Perm delete),  **ftype** (JsonRelated),  **entity_type** (Model.System.Field)

* role

 **code** (user_authorization.role),  **model** (Model.User.Authorization),  **label** (Role),  **ftype** (Many2One),  **entity_type** (Model.System.RelationShip),  **local_column** (None),  **remote_column** (None),  **remote_name** (None),  **remote_model** (Model.User.Role),  **remote** (False),  **nullable** (True)

* role_name

 **code** (user_authorization.role_name),  **model** (Model.User.Authorization),  **label** (Role),  **ftype** (FakeColumn),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (user_role.name),  **primary_key** (False),  **unique** (False),  **nullable** (True),  **remote_model** (None)

* user

 **code** (user_authorization.user),  **model** (Model.User.Authorization),  **label** (User),  **ftype** (Many2One),  **entity_type** (Model.System.RelationShip),  **local_column** (None),  **remote_column** (None),  **remote_name** (None),  **remote_model** (Model.User),  **remote** (False),  **nullable** (True)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _format_field

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* before_insert_orm_event

* before_update_orm_event

* check_validity

Check at the insert or update that all rule match

        :exception: AuthorizationValidationException
        

* define_mapper_args

* define_table_args

* define_table_kwargs

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* filter

* find_relationship

* find_remote_attribute_to_expire

* getFieldType

* get_acl

Return the Pyramid ACL in function of the resource and user

        :param login: str, login of the user
        :param resource: str, name of the resource
        

* get_acl_filter_model

Return the Model to use to check the permission

* get_all_registry_names

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* id

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* login

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* model

* order

* perm_create

* perm_delete

* perm_read

* perm_update

* perms

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* primary_keys

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* resource

* role

* role_name

* user

Model.ReductionCard
-------------------

Properties:

* **table name** : reductioncard

Fields
~~~~~~

* code

 **code** (reductioncard.code),  **model** (Model.ReductionCard),  **label** (Code),  **ftype** (Text),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* name

 **code** (reductioncard.name),  **model** (Model.ReductionCard),  **label** (Name),  **ftype** (Text),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _format_field

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* code

* define_mapper_args

* define_table_args

* define_table_kwargs

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* getFieldType

* get_all_registry_names

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* name

* passengers

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

Model.Passenger
---------------

Properties:

* **table name** : passenger

Fields
~~~~~~

* birthdate

 **code** (passenger.birthdate),  **model** (Model.Passenger),  **label** (Birthdate),  **ftype** (Date),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* name

 **code** (passenger.name),  **model** (Model.Passenger),  **label** (Passenger Name),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* properties

 **code** (passenger.properties),  **model** (Model.Passenger),  **label** (properties),  **ftype** (Jsonb),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* uuid

 **code** (passenger.uuid),  **model** (Model.Passenger),  **label** (Uuid),  **ftype** (UUID),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* reduction_card

 **code** (passenger.reduction_card),  **model** (Model.Passenger),  **label** (Reduction Card),  **ftype** (Many2One),  **entity_type** (Model.System.RelationShip),  **local_column** (None),  **remote_column** (None),  **remote_name** (passengers),  **remote_model** (Model.ReductionCard),  **remote** (False),  **nullable** (True)

* reduction_card_code

 **code** (passenger.reduction_card_code),  **model** (Model.Passenger),  **label** (Reduction Card),  **ftype** (FakeColumn),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (reductioncard.code),  **primary_key** (False),  **unique** (False),  **nullable** (True),  **remote_model** (None)

* user

 **code** (passenger.user),  **model** (Model.Passenger),  **label** (User),  **ftype** (Many2One),  **entity_type** (Model.System.RelationShip),  **local_column** (None),  **remote_column** (None),  **remote_name** (passengers),  **remote_model** (Model.User),  **remote** (False),  **nullable** (False)

* user_login

 **code** (passenger.user_login),  **model** (Model.Passenger),  **label** (User),  **ftype** (FakeColumn),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (user.login),  **primary_key** (False),  **unique** (False),  **nullable** (False),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _format_field

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* birthdate

* define_mapper_args

* define_table_args

* define_table_kwargs

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* getFieldType

* get_all_registry_names

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* name

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* properties

* reduction_card

* reduction_card_code

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* user

* user_login

* uuid

* wishes

Model.Station
-------------

This model has Model.Station as a namespace. It is intented for storing
       known stations extracted from a stations.csv file.

Properties:

* **table name** : station

Fields
~~~~~~

* id

 **code** (station.id),  **model** (Model.Station),  **label** (Id),  **ftype** (Integer),  **entity_type** (Model.System.Column),  **autoincrement** (True),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* name

 **code** (station.name),  **model** (Model.Station),  **label** (Name),  **ftype** (Text),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* slug

 **code** (station.slug),  **model** (Model.Station),  **label** (Slug),  **ftype** (Text),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* _format_field

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* arrivals

* define_mapper_args

* define_table_args

* define_table_kwargs

* departures

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* getFieldType

* get_all_registry_names

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* id

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* name

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* slug

Model.JourneyWish
-----------------

This model has Model.JourneyWish as a namespace. It is intented for
       storing journey wishes that represents travels intentions.

       For instance, an intention may be caracterized by start date, with an
       a time frame delimited by earlier and latest departure times,
       departure and arrival stations, passengers, maximum price, etc...

       Implemented fields are the following :

           * Departure station : Many2One relationship with Model.Station
           * Arrival station : Many2One relationship with Model.Station
           * Start date : DateTime representing earlier time after which train
           may leave the departure station
           * End date : DateTime representing latest time after which train may
           leave departure station.
           * Passengers : Many2Many relationship to Model.Passenger
           * Transportation mean : String, containing type of transport
           required by user (train, coach, etc...)
           * Active : boolean that stores if wish has to be processed
           * Activation date : Date, represent the moment when the wish could
           start being processed

Properties:

* **table name** : journeywish

Fields
~~~~~~

* from_date

 **code** (journeywish.from_date),  **model** (Model.JourneyWish),  **label** (Earlier Departure Date),  **ftype** (DateTime),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* end_date

 **code** (journeywish.end_date),  **model** (Model.JourneyWish),  **label** (Latest Departure Date),  **ftype** (DateTime),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* activation_date

 **code** (journeywish.activation_date),  **model** (Model.JourneyWish),  **label** (Activation Date),  **ftype** (Date),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* transportation_mean

 **code** (journeywish.transportation_mean),  **model** (Model.JourneyWish),  **label** (Transportation Mean),  **ftype** (String),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* active

 **code** (journeywish.active),  **model** (Model.JourneyWish),  **label** (Active Wish),  **ftype** (Boolean),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (True),  **remote_model** (None)

* uuid

 **code** (journeywish.uuid),  **model** (Model.JourneyWish),  **label** (Uuid),  **ftype** (UUID),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (True),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* create_date

 **code** (journeywish.create_date),  **model** (Model.JourneyWish),  **label** (Create date),  **ftype** (DateTime),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* edit_date

 **code** (journeywish.edit_date),  **model** (Model.JourneyWish),  **label** (Edit date),  **ftype** (DateTime),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* state

 **code** (journeywish.state),  **model** (Model.JourneyWish),  **label** (State),  **ftype** (Selection),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (None),  **primary_key** (False),  **unique** (None),  **nullable** (False),  **remote_model** (None)

* user

 **code** (journeywish.user),  **model** (Model.JourneyWish),  **label** (User),  **ftype** (Many2One),  **entity_type** (Model.System.RelationShip),  **local_column** (None),  **remote_column** (None),  **remote_name** (wishes),  **remote_model** (Model.User),  **remote** (False),  **nullable** (False)

* user_login

 **code** (journeywish.user_login),  **model** (Model.JourneyWish),  **label** (User),  **ftype** (FakeColumn),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (user.login),  **primary_key** (False),  **unique** (False),  **nullable** (False),  **remote_model** (None)

* departure

 **code** (journeywish.departure),  **model** (Model.JourneyWish),  **label** (Departure Station),  **ftype** (Many2One),  **entity_type** (Model.System.RelationShip),  **local_column** (None),  **remote_column** (None),  **remote_name** (departures),  **remote_model** (Model.Station),  **remote** (False),  **nullable** (True)

* departure_id

 **code** (journeywish.departure_id),  **model** (Model.JourneyWish),  **label** (Departure Station),  **ftype** (FakeColumn),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (station.id),  **primary_key** (False),  **unique** (False),  **nullable** (True),  **remote_model** (None)

* arrival

 **code** (journeywish.arrival),  **model** (Model.JourneyWish),  **label** (Arrival Station),  **ftype** (Many2One),  **entity_type** (Model.System.RelationShip),  **local_column** (None),  **remote_column** (None),  **remote_name** (arrivals),  **remote_model** (Model.Station),  **remote** (False),  **nullable** (True)

* arrival_id

 **code** (journeywish.arrival_id),  **model** (Model.JourneyWish),  **label** (Arrival Station),  **ftype** (FakeColumn),  **entity_type** (Model.System.Column),  **autoincrement** (False),  **foreign_key** (station.id),  **primary_key** (False),  **unique** (False),  **nullable** (True),  **remote_model** (None)

* passengers

 **code** (journeywish.passengers),  **model** (Model.JourneyWish),  **label** (Passengers),  **ftype** (Many2Many),  **entity_type** (Model.System.RelationShip),  **local_column** (None),  **remote_column** (None),  **remote_name** (wishes),  **remote_model** (Model.Passenger),  **remote** (False),  **nullable** (True)

Attributes, methods and class methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* DEFAULT_STATE

* WORKFLOW

dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)

* _format_field

* activate

* activation_date

* active

* add_in_table_args

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* arrival

* arrival_id

* before_delete_orm_event

* before_update_orm_event

* check_if_forbid_delete_condition_is_true

* check_if_forbid_update_condition_is_true

* check_state

This method is aimed at being used in order to automatically set
           workflow state, depending on record attributes.

* create_date

* deactivate

* define_mapper_args

* define_table_args

* define_table_kwargs

* departure

* departure_id

* edit_date

* end_date

* expire

 Expire the attribute of the instance, theses attributes will be
        load at the next  call of the instance

        see: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.expire
        

* expire_relationship_mapped

 Expire the objects linked with this object, in function of
        the mappers definition
        

* expunge

Expunge the instance in the session

* find_relationship

* find_remote_attribute_to_expire

* from_date

* getFieldType

* get_all_registry_names

* get_default_state

* get_hybrid_property_columns

* get_modified_fields

return the fields which have changed and their previous values

* get_states

* get_workflow_definition

This method is aimed at defining workflow used for model
           Model.JourneyWish

* hybrid_property_columns

Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.

* is_sql

bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.

* metadata

A collection of :class:`.Table` objects and their associated schema
    constructs.

    Holds a collection of :class:`.Table` objects as well as
    an optional binding to an :class:`.Engine` or
    :class:`.Connection`.  If bound, the :class:`.Table` objects
    in the collection and their columns may participate in implicit SQL
    execution.

    The :class:`.Table` objects themselves are stored in the
    :attr:`.MetaData.tables` dictionary.

    :class:`.MetaData` is a thread-safe object for read operations.
    Construction of new tables within a single :class:`.MetaData` object,
    either explicitly or via reflection, may not be completely thread-safe.

    .. seealso::

        :ref:`metadata_describing` - Introduction to database metadata

    

* passengers

* postcommit_hook

 Same in the registry a hook to call just after the commit

        you can choice if the hook is called in function of ``call_only_if``:

        * ``commited``: Call if the commit is done without exception
        * ``raised``: Call if one exception was raised
        * ``always``: Always call

        .. warning::

            Only one instance with same paramters of the hook is called
            after the commit

        :param method: the method to call on this model
        :param put_at_the_end_if_exist: If ``True`` the hook is move at the end
        :param call_only_if: ['commited' (default), 'raised', 'always']
        

* refresh

 Expire and reload all the attribute of the instance

        See: http://docs.sqlalchemy.org/en/latest/orm/session_api.html
        #sqlalchemy.orm.session.Session.refresh
        

* state

* state_to

* transportation_mean

* user

* user_login

* uuid

* validate_conditions

